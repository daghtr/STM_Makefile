
Memory Configuration

Name             Origin             Length             Attributes
FLASH            0x08000000         0x00010000         xr
RAM              0x20000000         0x00005000         xrw
*default*        0x00000000         0xffffffff

Linker script and memory map

                0x00000000                _Min_Heap_Size = 0x0
                0x00000100                _Min_Stack_Size = 0x100
                0x20005000                _estack = (ORIGIN (RAM) + LENGTH (RAM))

.isr_vector     0x08000000      0x10c
                0x08000000                . = ALIGN (0x4)
 *(.isr_vector)
 .isr_vector    0x08000000      0x10c build/startup_stm32f103xb.o
                0x08000000                g_pfnVectors
                0x0800010c                . = ALIGN (0x4)

.text           0x0800010c      0x348
                0x0800010c                . = ALIGN (0x4)
 *(.text)
 .text          0x0800010c       0x14 build/startup_stm32f103xb.o
 .text          0x08000120       0x94 build/main.o
                0x08000120                gpio_output_pin13_init
                0x08000164                delay
                0x08000186                main
 .text          0x080001b4      0x258 build/system_stm32f10x.o
                0x080001b4                SystemInit
                0x0800021c                SystemCoreClockUpdate
 *(.text*)
 .text.Reset_Handler
                0x0800040c       0x44 build/startup_stm32f103xb.o
                0x0800040c                Reset_Handler
 .text.Default_Handler
                0x08000450        0x2 build/startup_stm32f103xb.o
                0x08000450                RTC_Alarm_IRQHandler
                0x08000450                EXTI2_IRQHandler
                0x08000450                DebugMon_Handler
                0x08000450                TIM1_CC_IRQHandler
                0x08000450                HardFault_Handler
                0x08000450                SysTick_Handler
                0x08000450                PVD_IRQHandler
                0x08000450                PendSV_Handler
                0x08000450                NMI_Handler
                0x08000450                EXTI3_IRQHandler
                0x08000450                EXTI0_IRQHandler
                0x08000450                I2C2_EV_IRQHandler
                0x08000450                UsageFault_Handler
                0x08000450                ADC1_2_IRQHandler
                0x08000450                SPI1_IRQHandler
                0x08000450                TAMPER_IRQHandler
                0x08000450                DMA1_Channel4_IRQHandler
                0x08000450                USART3_IRQHandler
                0x08000450                RTC_IRQHandler
                0x08000450                DMA1_Channel7_IRQHandler
                0x08000450                CAN1_RX1_IRQHandler
                0x08000450                TIM4_IRQHandler
                0x08000450                I2C1_EV_IRQHandler
                0x08000450                DMA1_Channel6_IRQHandler
                0x08000450                TIM3_IRQHandler
                0x08000450                RCC_IRQHandler
                0x08000450                TIM1_TRG_COM_IRQHandler
                0x08000450                DMA1_Channel1_IRQHandler
                0x08000450                Default_Handler
                0x08000450                EXTI15_10_IRQHandler
                0x08000450                EXTI9_5_IRQHandler
                0x08000450                SPI2_IRQHandler
                0x08000450                MemManage_Handler
                0x08000450                SVC_Handler
                0x08000450                DMA1_Channel5_IRQHandler
                0x08000450                EXTI4_IRQHandler
                0x08000450                USB_LP_CAN1_RX0_IRQHandler
                0x08000450                USB_HP_CAN1_TX_IRQHandler
                0x08000450                DMA1_Channel3_IRQHandler
                0x08000450                TIM1_UP_IRQHandler
                0x08000450                WWDG_IRQHandler
                0x08000450                TIM2_IRQHandler
                0x08000450                TIM1_BRK_IRQHandler
                0x08000450                EXTI1_IRQHandler
                0x08000450                USART2_IRQHandler
                0x08000450                I2C2_ER_IRQHandler
                0x08000450                DMA1_Channel2_IRQHandler
                0x08000450                CAN1_SCE_IRQHandler
                0x08000450                FLASH_IRQHandler
                0x08000450                BusFault_Handler
                0x08000450                USART1_IRQHandler
                0x08000450                I2C1_ER_IRQHandler
                0x08000450                USBWakeUp_IRQHandler
 *(.glue_7)
 .glue_7        0x08000452        0x0 linker stubs
 *(.glue_7t)
 .glue_7t       0x08000452        0x0 linker stubs
 *(.eh_frame)
 *(.init)
 *(.fini)
                0x08000454                . = ALIGN (0x4)
 *fill*         0x08000452        0x2 
                0x08000454                _etext = .

.vfp11_veneer   0x08000454        0x0
 .vfp11_veneer  0x08000454        0x0 linker stubs

.v4_bx          0x08000454        0x0
 .v4_bx         0x08000454        0x0 linker stubs

.iplt           0x08000454        0x0
 .iplt          0x08000454        0x0 build/startup_stm32f103xb.o

.rel.dyn        0x08000454        0x0
 .rel.iplt      0x08000454        0x0 build/startup_stm32f103xb.o

.rodata         0x08000454        0x0
                0x08000454                . = ALIGN (0x4)
 *(.rodata)
 *(.rodata*)
                0x08000454                . = ALIGN (0x4)

.ARM.extab
 *(.ARM.extab* .gnu.linkonce.armextab.*)

.ARM            0x08000454        0x0
                0x08000454                __exidx_start = .
 *(.ARM.exidx*)
                0x08000454                __exidx_end = .

.preinit_array  0x08000454        0x0
                [!provide]                PROVIDE (__preinit_array_start = .)
 *(.preinit_array*)
                [!provide]                PROVIDE (__preinit_array_end = .)

.init_array     0x08000454        0x0
                [!provide]                PROVIDE (__init_array_start = .)
 *(SORT_BY_NAME(.init_array.*))
 *(.init_array*)
                [!provide]                PROVIDE (__init_array_end = .)

.fini_array     0x08000454        0x0
                [!provide]                PROVIDE (__fini_array_start = .)
 *(SORT_BY_NAME(.fini_array.*))
 *(.fini_array*)
                [!provide]                PROVIDE (__fini_array_end = .)
                0x08000454                _sidata = LOADADDR (.data)

.data           0x20000000       0x14 load address 0x08000454
                0x20000000                . = ALIGN (0x4)
                0x20000000                _sdata = .
 *(.data)
 .data          0x20000000        0x0 build/startup_stm32f103xb.o
 .data          0x20000000        0x0 build/main.o
 .data          0x20000000       0x14 build/system_stm32f10x.o
                0x20000000                SystemCoreClock
                0x20000004                AHBPrescTable
 *(.data*)
                0x20000014                . = ALIGN (0x4)
                0x20000014                _edata = .

.igot.plt       0x20000014        0x0 load address 0x08000468
 .igot.plt      0x20000014        0x0 build/startup_stm32f103xb.o
                0x20000014                . = ALIGN (0x4)

.bss            0x20000014        0x0 load address 0x08000468
                0x20000014                _sbss = .
                0x20000014                __bss_start__ = _sbss
 *(.bss)
 .bss           0x20000014        0x0 build/startup_stm32f103xb.o
 .bss           0x20000014        0x0 build/main.o
 .bss           0x20000014        0x0 build/system_stm32f10x.o
 *(.bss*)
 *(COMMON)
                0x20000014                . = ALIGN (0x4)
                0x20000014                _ebss = .
                0x20000014                __bss_end__ = _ebss

.heap           0x20000014        0x0 load address 0x08000468
                0x20000014                . = ALIGN (0x4)
                [!provide]                PROVIDE (end = .)
                [!provide]                PROVIDE (_end = .)
 *(.heap*)
                0x20000014                . = (. + _Min_Heap_Size)
                0x20000014                __HeapLimit = .
                0x20000014                . = ALIGN (0x4)

.ARM.attributes
                0x00000000       0x2f
 *(.ARM.attributes)
 .ARM.attributes
                0x00000000       0x21 build/startup_stm32f103xb.o
 .ARM.attributes
                0x00000021       0x2d build/main.o
 .ARM.attributes
                0x0000004e       0x2d build/system_stm32f10x.o
                0x20004f00                __StackLimit = (_estack - _Min_Stack_Size)
                0x00000001                ASSERT ((__StackLimit >= __HeapLimit), Region RAM overflowed with stack)
LOAD build/startup_stm32f103xb.o
LOAD build/main.o
LOAD build/system_stm32f10x.o
OUTPUT(build/build.elf elf32-littlearm)
LOAD linker stubs

.debug_line     0x00000000      0x3e6
 .debug_line    0x00000000       0x75 build/startup_stm32f103xb.o
 .debug_line    0x00000075      0x122 build/main.o
 .debug_line    0x00000197      0x24f build/system_stm32f10x.o

.debug_info     0x00000000      0x6cb
 .debug_info    0x00000000       0x22 build/startup_stm32f103xb.o
 .debug_info    0x00000022      0x1f3 build/main.o
 .debug_info    0x00000215      0x4b6 build/system_stm32f10x.o

.debug_abbrev   0x00000000      0x272
 .debug_abbrev  0x00000000       0x12 build/startup_stm32f103xb.o
 .debug_abbrev  0x00000012       0xe3 build/main.o
 .debug_abbrev  0x000000f5      0x17d build/system_stm32f10x.o

.debug_aranges  0x00000000       0x68
 .debug_aranges
                0x00000000       0x28 build/startup_stm32f103xb.o
 .debug_aranges
                0x00000028       0x20 build/main.o
 .debug_aranges
                0x00000048       0x20 build/system_stm32f10x.o

.debug_str      0x00000000      0x2e5
 .debug_str     0x00000000       0x57 build/startup_stm32f103xb.o
 .debug_str     0x00000057      0x154 build/main.o
                                0x1c0 (size before relaxing)
 .debug_str     0x000001ab      0x13a build/system_stm32f10x.o
                                0x2cc (size before relaxing)

.debug_ranges   0x00000000       0x20
 .debug_ranges  0x00000000       0x20 build/startup_stm32f103xb.o

.comment        0x00000000       0x4d
 .comment       0x00000000       0x4d build/main.o
                                 0x4e (size before relaxing)
 .comment       0x0000004d       0x4e build/system_stm32f10x.o

.debug_frame    0x00000000      0x10c
 .debug_frame   0x00000000       0x74 build/main.o
 .debug_frame   0x00000074       0x98 build/system_stm32f10x.o
